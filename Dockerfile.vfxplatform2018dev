FROM centos:7.3.1611

RUN yum install -y deltarpm && \
    yum update -y && \
    yum install -y \
        # Devtools requirements
            centos-release-scl \
        # cmake3 requirements
            epel-release && \
    yum install -y \
        # gcc 5.3.1 (via Devtools which is equivalent of RedHat DTS)
            devtoolset-4-gcc*-5.3.1 \
        # glibc 2.17
            glibc-*-2.17 \
        # Qt5 requirements
            # http://doc.qt.io/qt-5/linux-requirements.html
                libXrender* libxcb* xcb* fontconfig* freetype* libXi* libXext* libX11* libSM* libICE* libglib* libpthread* gstreamer* \
            # https://wiki.qt.io/Building_Qt_5_from_Git
                # Build essentials
                    perl-version \
                # Libxcb
                    libxcb libxcb-devel xcb-util xcb-util-devel xcb-util-*-devel libX11-devel libXrender-devel libXi-devel \
                # Accessibility
                    at-spi2-core-devel \
                    libdbus* \
                # QtWebkit
                    flex bison gperf libicu-devel libxslt-devel ruby \
                # QtMultimedia
                    alsa-lib alsa-lib-devel gstreamer gstreamer-devel gstreamer-plugins-base gstreamer-plugins-base-devel \
                # libICU
                    libicu-devel \
        # QtWebEngine requirements (disabled because of "error code 2" during make)
            # http://doc.qt.io/qt-5/qtwebengine-platform-notes.html
                # bison* flex* gperf* \
                # python2-pkgconfig \
                    # dbus dbus-devel \
                    # fontconfig-devel \
                # libxcb* \
                    # libdrm* \
                    # libXcomposite-devel \
                    # libXcursor-devel \
                    # libXi libXi-devel \
                    # libXrandr-devel \
                    # libXScrnSaver-devel \
                    # libXtst-devel \
                # Note: khr package ???
                # libcap* \
            # https://wiki.qt.io/How_to_Try_QtWebEngine
                # gyp ninja-build \
                # mesa-libEGL-devel libgcrypt-devel libgcrypt pciutils-devel nss-devel libXtst-devel gperf \
                # cups-devel pulseaudio-libs-devel libgudev1-devel systemd-devel libcap-devel alsa-lib-devel flex bison ruby \
                # ninja requirements (used by QtWebEngine)
                    # re2c \
            # https://wiki.qt.io/Building_Qt_5_from_Git
                # libgcrypt-devel libgcrypt pciutils-devel nss-devel libXtst-devel gperf cups-devel pulseaudio-libs-devel libgudev1-devel systemd-devel libcap-devel alsa-lib-devel flex bison ruby gcc-c++ dbus libXrandr-devel libXcomposite-devel libXcursor-devel dbus-devel fontconfig-devel \
        # Python requirements
            zlib-devel openssl-devel sqlite-devel bzip2-devel readline-devel tk-devel \
            valgrind-devel \
        # PySide2 requirements
            # https://wiki.qt.io/PySide2_GettingStarted
                libxslt libxml2 libxml2-devel libxslt-devel cmake3 openssl* \
        # PySide
            # cmake gcc gcc-c++ make python-devel python-pip \
            qt-devel qt-webkit-devel libxml2-devel libxslt-devel rpmdevtools \
        # Xvfb etc
            Xvfb \
            xorg-x11-server-Xvfb \
            mesa-dri-drivers \
            libxkbcommon \
            libxkbcommon-devel \
            libxkbcommon-x11 \
            libxkbcommon-x11-devel \
        # Git
            # gcc \
            curl-devel expat-devel gettext-devel openssl-devel zlib-devel \
            perl-ExtUtils-MakeMaker \
        # Various tools
            wget && \
    yum clean all

# Parallel build processes (set to cores +1)
ENV BUILD_THREADS=9

# Activate devtoolset-4 gcc 5.3.1
# RUN scl enable devtoolset-4 bash
ENV PATH="/opt/rh/devtoolset-4/root/usr/bin:${PATH}"

# Set workdir
WORKDIR /workdir


# Git 2.x with "git clone -j" functionality
# https://tecadmin.net/install-git-2-0-on-centos-rhel-fedora/
ENV GIT_VER=2.9.4
RUN wget https://www.kernel.org/pub/software/scm/git/git-${GIT_VER}.tar.gz && \
    tar xzf git-${GIT_VER}.tar.gz && \
    cd git-${GIT_VER} && \
    make -j${BUILD_THREADS} prefix=/usr/local/git all && \
    make prefix=/usr/local/git install && \
    cd .. && rm -rf git-${GIT_VER} && rm -f git-${GIT_VER}.tar.gz
ENV PATH="/usr/local/git/bin:${PATH}"


# Qt 5.6.1, Autodesk-modified
ENV QT_VER=5.6.1
RUN git clone --recursive -j${BUILD_THREADS} --branch ${QT_VER} https://code.qt.io/qt/qt5.git && \
    rm -rf qt5/qtbase && \
    rm -rf qt5/qtx11extras && \
    git clone --recursive --branch adsk-contrib/vfx/${QT_VER} https://github.com/autodesk-forks/qtbase.git qt5/qtbase && \
    git clone --recursive --branch adsk-contrib/vfx/${QT_VER} https://github.com/autodesk-forks/qtx11extras.git qt5/qtx11extras && \
    cd qt5 && \
    # ./configure -help && \
    ./configure -opensource -confirm-license -nomake examples -nomake tests && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf qt5


# Qt Creator
# https://wiki.qt.io/Building_Qt_Creator_from_Git
# Required for PySide2.QtUiTools
RUN git clone --recursive --branch 4.4 -j${BUILD_THREADS} https://code.qt.io/qt-creator/qt-creator.git && \
    mkdir qt-creator-build && \
    cd qt-creator-build && \
    /usr/local/Qt-${QT_VER}/bin/qmake -r /workdir/qt-creator/qtcreator.pro && \
    make -j${BUILD_THREADS} && \
    make install INSTALL_ROOT=/usr/local/qtcreator && \
    cd .. && rm -rf qt-creator && rm -rf qt-creator-build


# Python 2.7.x
# Notes:
#     https://danieleriksson.net/2017/02/08/how-to-install-latest-python-on-centos/
#     http://blog.dscpl.com.au/2015/06/installing-custom-python-version-into.html
#     https://stackoverflow.com/questions/37345044/issue-with-installing-python-2-7-8-alongside-2-7-5-on-rhel-7-2
#
ENV PYTHON_VER_FULL=2.7.13
ENV PYTHON_VER=2.7
ENV PYTHON3_VER_FULL=3.4.6
ENV PYTHON3_VER=3.4
RUN \
    # Python 2
    mkdir -p /usr/local/python${PYTHON_VER}/lib && \
    wget https://www.python.org/ftp/python/${PYTHON_VER_FULL}/Python-${PYTHON_VER_FULL}.tgz && \
    tar xzf Python-${PYTHON_VER_FULL}.tgz && \
    cd Python-${PYTHON_VER_FULL} && \
    # Get the configure arguments from an already existing CentOS 7-installation:
    # $ python
    # >>> from distutils.sysconfig import get_config_var
    # >>> print get_config_var('CONFIG_ARGS')
    ./configure \
        --prefix=/usr/local/python${PYTHON_VER} \
        --enable-shared \
        --enable-unicode=ucs4 \
        LDFLAGS="-Wl,-rpath /usr/local/python${PYTHON_VER}/lib" \

        --build=x86_64-redhat-linux-gnu \
        --host=x86_64-redhat-linux-gnu \
        --enable-ipv6 \
        --with-dbmliborder=gdbm:ndbm:bdb \
        --with-system-expat \
        --with-system-ffi \
        --with-valgrind \
        build_alias=x86_64-redhat-linux-gnu \
        host_alias=x86_64-redhat-linux-gnu \
        CC=gcc \
        CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv" \
        CPPFLAGS="" && \
    make -j${BUILD_THREADS} && \
    make altinstall && \
    cd /workdir && \
    wget https://bootstrap.pypa.io/get-pip.py && \
    /usr/local/python${PYTHON_VER}/bin/python${PYTHON_VER} get-pip.py && \
    /usr/local/python${PYTHON_VER}/bin/pip${PYTHON_VER} install -U pip && \
    rm -rf Python-${PYTHON_VER_FULL} && rm -f Python-${PYTHON_VER_FULL}.tgz && rm -f get-pip.py && \

    # Python 3.x
    mkdir -p /usr/local/python${PYTHON3_VER}/lib && \
    wget https://www.python.org/ftp/python/${PYTHON3_VER_FULL}/Python-${PYTHON3_VER_FULL}.tgz && \
    tar xzf Python-${PYTHON3_VER_FULL}.tgz && \
    cd Python-${PYTHON3_VER_FULL} && \
    # Get the configure arguments from an already existing CentOS 7-installation:
    # $ python
    # >>> from distutils.sysconfig import get_config_var
    # >>> print get_config_var('CONFIG_ARGS')
    ./configure \
        --prefix=/usr/local/python${PYTHON3_VER} \
        --enable-shared \
        LDFLAGS="-Wl,-rpath /usr/local/python${PYTHON3_VER}/lib" \

        --build=x86_64-redhat-linux-gnu \
        --host=x86_64-redhat-linux-gnu \
        --enable-ipv6 \
        --with-dbmliborder=gdbm:ndbm:bdb \
        --with-system-expat \
        --with-system-ffi \
        --with-valgrind \
        build_alias=x86_64-redhat-linux-gnu \
        host_alias=x86_64-redhat-linux-gnu \
        CC=gcc \
        CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv" \
        CPPFLAGS="" && \
    make -j${BUILD_THREADS} && \
    make altinstall && \
    cd /workdir && \
    wget https://bootstrap.pypa.io/get-pip.py && \
    /usr/local/python${PYTHON3_VER}/bin/python${PYTHON3_VER} get-pip.py && \
    /usr/local/python${PYTHON3_VER}/bin/pip${PYTHON3_VER} install -U pip && \
    rm -rf Python-${PYTHON3_VER_FULL} && rm -f Python-${PYTHON3_VER_FULL}.tgz && rm -f get-pip.py


# Register Python as default (without replacing system-python and without breaking e.g. yum)
RUN \
    # Python 2
    ln -s /usr/local/python${PYTHON_VER}/bin/python${PYTHON_VER} /usr/local/bin/python && \
    ln -s /usr/local/python${PYTHON_VER}/bin/python${PYTHON_VER} /usr/local/bin/python${PYTHON_VER} && \
    ln -s /usr/local/python${PYTHON_VER}/bin/pip${PYTHON_VER} /usr/local/bin/pip && \
    ln -s /usr/local/python${PYTHON_VER}/bin/pip${PYTHON_VER} /usr/local/bin/pip${PYTHON_VER} && \
    # Python 3
    ln -s /usr/local/python${PYTHON3_VER}/bin/python${PYTHON3_VER} /usr/local/bin/python${PYTHON3_VER} && \
    ln -s /usr/local/python${PYTHON3_VER}/bin/pip${PYTHON3_VER} /usr/local/bin/pip${PYTHON3_VER}
ENV PATH="/usr/local/bin:${PATH}"


# Pip packages
RUN \
    # Python 2
    pip${PYTHON_VER} install -U \
        # Qt.py testing (nosepipe)
        nose \
        nosepipe \
        six \
        # General build
        setuptools \
        wheel && \
    # Python 3
    pip${PYTHON3_VER} install -U \
        # Qt.py testing (nosepipe)
        nose \
        nosepipe \
        six \
        # General build
        setuptools \
        wheel && \
    ln -s /usr/local/python${PYTHON_VER}/bin/nosetests /usr/local/bin/nosetests${PYTHON_VER} && \
    ln -s /usr/local/python${PYTHON3_VER}/bin/nosetests /usr/local/bin/nosetests${PYTHON3_VER}


# PySide
# http://pyside.readthedocs.io/en/latest/building/options.html
RUN \
    # PySide for Python 2
    git clone --recursive --jobs ${BUILD_THREADS} https://github.com/pyside/pyside-setup.git && \
    cd pyside-setup && \
    python${PYTHON_VER} setup.py \
        install \
            --qmake=/usr/bin/qmake-qt4 \
            --cmake=/usr/bin/cmake3 \
            --openssl=/usr/bin/openssl \
            --jobs=${BUILD_THREADS} && \
    cd .. && rm -rf pyside-setup && \

    # PySide for Python 3
    git clone --recursive --jobs ${BUILD_THREADS} https://github.com/pyside/pyside-setup.git && \
    cd pyside-setup && \
    python${PYTHON3_VER} setup.py \
        install \
            --qmake=/usr/bin/qmake-qt4 \
            --cmake=/usr/bin/cmake3 \
            --openssl=/usr/bin/openssl \
            --jobs=${BUILD_THREADS} && \
    cd .. && rm -rf pyside-setup


# Sip
ENV SIP_VER=4.18
RUN \
    # Python 2
    wget http://sourceforge.net/projects/pyqt/files/sip/sip-${SIP_VER}/sip-${SIP_VER}.tar.gz && \
    tar -xvf sip-${SIP_VER}.tar.gz && \
    cd sip-${SIP_VER} && \
    python${PYTHON_VER} configure.py && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf sip-${SIP_VER} && rm -f *.tar.gz && \

    # Python 3
    wget http://sourceforge.net/projects/pyqt/files/sip/sip-${SIP_VER}/sip-${SIP_VER}.tar.gz && \
    tar -xvf sip-${SIP_VER}.tar.gz && \
    cd sip-${SIP_VER} && \
    python${PYTHON3_VER} configure.py && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf sip-${SIP_VER} && rm -f *.tar.gz


# PyQt4
# The version of PyQt4 must be compatible with the SIP version used to build PyQt5
ENV PYQT4_VER=4.11.4
RUN \
    # PyQt4 for Python 2
    wget http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-${PYQT4_VER}/PyQt-x11-gpl-${PYQT4_VER}.tar.gz && \
    tar -xvf PyQt-x11-gpl-${PYQT4_VER}.tar.gz && \
    cd PyQt-x11-gpl-${PYQT4_VER} && \
    python${PYTHON_VER} configure.py \
        # --verbose \
        --confirm-license \
        --qmake=/usr/bin/qmake-qt4 && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf PyQt-x11-gpl-${PYQT4_VER} && rm -f *.tar.gz && \

    # PyQt4 for Python 3
    wget http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-${PYQT4_VER}/PyQt-x11-gpl-${PYQT4_VER}.tar.gz && \
    tar -xvf PyQt-x11-gpl-${PYQT4_VER}.tar.gz && \
    cd PyQt-x11-gpl-${PYQT4_VER} && \
    python${PYTHON3_VER} configure.py \
        # --verbose \
        --confirm-license \
        --qmake=/usr/bin/qmake-qt4 && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf PyQt-x11-gpl-${PYQT4_VER} && rm -f *.tar.gz


# PyQt5
ENV PYQT5_VER=5.6
RUN \
    # PyQt5 for Python 2
    wget http://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-${PYQT5_VER}/PyQt5_gpl-${PYQT5_VER}.tar.gz && \
    tar -xvf PyQt5_gpl-${PYQT5_VER}.tar.gz && \
    cd PyQt5_gpl-${PYQT5_VER} && \
    python${PYTHON_VER} configure.py \
        # --verbose \
        --confirm-license \
        --qmake=/usr/local/Qt-${QT_VER}/bin/qmake \
        --sip=/usr/local/python${PYTHON_VER}/bin/sip && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf PyQt5_gpl-${PYQT5_VER} && rm -f *.tar.gz && \

    # PyQt5 for Python 3
    wget http://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-${PYQT5_VER}/PyQt5_gpl-${PYQT5_VER}.tar.gz && \
    tar -xvf PyQt5_gpl-${PYQT5_VER}.tar.gz && \
    cd PyQt5_gpl-${PYQT5_VER} && \
    python${PYTHON3_VER} configure.py \
        # --verbose \
        --confirm-license \
        --qmake=/usr/local/Qt-${QT_VER}/bin/qmake \
        --sip=/usr/local/python${PYTHON3_VER}/bin/sip && \
    make -j${BUILD_THREADS} && \
    make install && \
    cd .. && rm -rf PyQt5_gpl-${PYQT5_VER} && rm -f *.tar.gz


# PySide2
RUN \
    # PySide2 for Python 2
    git clone --recursive --jobs ${BUILD_THREADS} --branch 5.6 https://codereview.qt-project.org/pyside/pyside-setup && \
    cd pyside-setup && \

    # Fix bug in order to build PySide2.QtUiTools: https://bugreports.qt.io/browse/PYSIDE-552
    sed -i.bak $'s/if(Qt5Designer_FOUND)/find_package(Qt5Designer)\\\nif(Qt5Designer_FOUND)/g' sources/pyside2/CMakeLists.txt && \
    # cat sources/pyside2/CMakeLists.txt && \

    python${PYTHON_VER} setup.py \
        # bdist_wheel \
        install \
            --ignore-git \
            --qmake=/usr/local/Qt-${QT_VER}/bin/qmake \
            --cmake=/usr/bin/cmake3 \
            --openssl=/usr/bin/openssl \
            --jobs=${BUILD_THREADS} && \
    # pip install /workdir/pyside-setup/dist/*.whl
    cd .. && rm -rf pyside-setup && \

    # PySide2 for Python 3
    git clone --recursive --jobs ${BUILD_THREADS} --branch 5.6 https://codereview.qt-project.org/pyside/pyside-setup && \
    cd pyside-setup && \

    # Fix bug in order to build PySide2.QtUiTools: https://bugreports.qt.io/browse/PYSIDE-552
    sed -i.bak $'s/if(Qt5Designer_FOUND)/find_package(Qt5Designer)\\\nif(Qt5Designer_FOUND)/g' sources/pyside2/CMakeLists.txt && \
    # cat sources/pyside2/CMakeLists.txt && \

    python${PYTHON3_VER} setup.py \
        # bdist_wheel \
        install \
            --ignore-git \
            --qmake=/usr/local/Qt-${QT_VER}/bin/qmake \
            --cmake=/usr/bin/cmake3 \
            --openssl=/usr/bin/openssl \
            --jobs=${BUILD_THREADS} && \
    # pip install /workdir/pyside-setup/dist/*.whl
    cd .. && rm -rf pyside-setup

# Ugly fix to make PySide2 find the Qt libs
ENV LD_LIBRARY_PATH="/usr/local/Qt-${QT_VER}/lib:${LD_LIBRARY_PATH}"

# Enable additional output from Qt.py
ENV QT_VERBOSE true
ENV QT_TESTING true

# Xvfb
ENV DISPLAY :99

# Prevent error: "Qt: Failed to create XKB context!"
# https://lists.debian.org/debian-backports/2014/10/msg00061.html
ENV QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb

# Warnings are exceptions
ENV PYTHONWARNINGS="ignore"

WORKDIR /workspace/Qt.py

ENTRYPOINT  cp -r /Qt.py /workspace && \
            Xvfb :99 -screen 0 1024x768x16 2>/dev/null & \
            while ! ps aux | grep -q '[0]:00 Xvfb :99 -screen 0 1024x768x16'; \
                do echo "Waiting for Xvfb..."; sleep 1; done && \

            echo "#\n# Running tests in ${PYTHON}" && \
            export NOSETESTS_BINARY=nosetests${PYTHON} && \

            echo "#\n# Testing implementation.." && \
                python${PYTHON} -u run_tests.py && \
            echo "#\n# Testing caveats..\n#"  && \
                python${PYTHON} build_caveats.py && \
                nosetests${PYTHON} \
                    --verbose \
                    --with-doctest \
                    --with-process-isolation \
                    test_caveats.py && \
            echo "#\n# Testing membership..\n#" && \
                python${PYTHON} build_membership.py && \
                nosetests${PYTHON} \
                    --verbose \
                    test_membership.py && \
            echo "#\n# Testing examples..\n#" && \
                nosetests${PYTHON} \
                --verbose \
                --with-process-isolation \
                --with-doctest \
                --exe \
                    examples/*/*.py && \
            echo Done
